{"version":3,"file":"react-intersection-observer.js","sources":["../src/observe.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["ObserverMap","Map","RootIds","WeakMap","rootId","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","undefined","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","as","tag","React","displayName","defaultProps","useInView","setRef","current","useEffect","result"],"mappings":"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"}