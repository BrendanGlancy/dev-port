{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/react/types/types.ts"],"names":[],"mappings":"","sourcesContent":["import { ReactNode } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { Observable, ObservableSubscription } from '../../utilities';\nimport { FetchResult } from '../../link/core';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloCache,\n  ApolloClient,\n  DefaultContext,\n  FetchPolicy,\n  MutationOptions,\n  NetworkStatus,\n  ObservableQuery,\n  OperationVariables,\n  InternalRefetchQueriesInclude,\n  WatchQueryOptions,\n} from '../../core';\n\n/* Common types */\n\nexport type { DefaultContext as Context } from \"../../core\";\n\nexport type CommonOptions<TOptions> = TOptions & {\n  client?: ApolloClient<object>;\n};\n\n/* Query types */\n\nexport interface BaseQueryOptions<TVariables = OperationVariables>\nextends Omit<WatchQueryOptions<TVariables>, \"query\"> {\n  ssr?: boolean;\n  client?: ApolloClient<any>;\n  context?: DefaultContext;\n}\n\nexport interface QueryFunctionOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseQueryOptions<TVariables> {\n  skip?: boolean;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n\n  // Default WatchQueryOptions for this useQuery, providing initial values for\n  // unspecified options, superseding client.defaultOptions.watchQuery (option\n  // by option, not whole), but never overriding options previously passed to\n  // useQuery (or options added/modified later by other means).\n  // TODO What about about default values that are expensive to evaluate?\n  defaultOptions?: Partial<WatchQueryOptions<TVariables, TData>>;\n}\n\nexport type ObservableQueryFields<TData, TVariables> = Pick<\n  ObservableQuery<TData, TVariables>,\n  | 'startPolling'\n  | 'stopPolling'\n  | 'subscribeToMore'\n  | 'updateQuery'\n  | 'refetch'\n  | 'reobserve'\n  | 'variables'\n  | 'fetchMore'\n>;\n\nexport interface QueryResult<TData = any, TVariables = OperationVariables>\n  extends ObservableQueryFields<TData, TVariables> {\n  client: ApolloClient<any>;\n  observable: ObservableQuery<TData, TVariables>;\n  data: TData | undefined;\n  previousData?: TData;\n  error?: ApolloError;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n  called: boolean;\n}\n\nexport interface QueryDataOptions<TData = any, TVariables = OperationVariables>\n  extends QueryFunctionOptions<TData, TVariables> {\n  children?: (result: QueryResult<TData, TVariables>) => ReactNode;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface QueryHookOptions<TData = any, TVariables = OperationVariables>\n  extends QueryFunctionOptions<TData, TVariables> {\n  query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface LazyQueryHookOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends Omit<QueryHookOptions<TData, TVariables>, 'skip'> {}\n\n/**\n * @deprecated TODO Delete this unused interface.\n */\nexport interface QueryLazyOptions<TVariables> {\n  variables?: TVariables;\n  context?: DefaultContext;\n}\n\n/**\n * @deprecated TODO Delete this unused type alias.\n */\nexport type LazyQueryResult<TData, TVariables> = QueryResult<TData, TVariables>;\n\n/**\n * @deprecated TODO Delete this unused type alias.\n */\nexport type QueryTuple<TData, TVariables> =\n  LazyQueryResultTuple<TData, TVariables>;\n\nexport type LazyQueryExecFunction<TData, TVariables> = (\n  options?: Partial<LazyQueryHookOptions<TData, TVariables>>,\n) => Promise<QueryResult<TData, TVariables>>;\n\nexport type LazyQueryResultTuple<TData, TVariables> = [\n  LazyQueryExecFunction<TData, TVariables>,\n  QueryResult<TData, TVariables>,\n];\n\n/* Mutation types */\n\nexport type RefetchQueriesFunction = (\n  ...args: any[]\n) => InternalRefetchQueriesInclude;\n\nexport interface BaseMutationOptions<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>\n> extends Omit<\n  MutationOptions<TData, TVariables, TContext, TCache>,\n  | \"mutation\"\n> {\n  client?: ApolloClient<object>;\n  notifyOnNetworkStatusChange?: boolean;\n  onCompleted?: (data: TData, clientOptions?: BaseMutationOptions) => void;\n  onError?: (error: ApolloError, clientOptions?: BaseMutationOptions) => void;\n  ignoreResults?: boolean;\n}\n\nexport interface MutationFunctionOptions<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends BaseMutationOptions<TData, TVariables, TContext, TCache> {\n  mutation?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface MutationResult<TData = any> {\n  data?: TData | null;\n  error?: ApolloError;\n  loading: boolean;\n  called: boolean;\n  client: ApolloClient<object>;\n  reset(): void;\n}\n\nexport declare type MutationFunction<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> = (\n  options?: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n) => Promise<FetchResult<TData>>;\n\nexport interface MutationHookOptions<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends BaseMutationOptions<TData, TVariables, TContext, TCache> {\n  mutation?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface MutationDataOptions<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> extends BaseMutationOptions<TData, TVariables, TContext, TCache> {\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport type MutationTuple<\n  TData,\n  TVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n> = [\n  (\n    options?: MutationFunctionOptions<TData, TVariables, TContext, TCache>\n    // TODO This FetchResult<TData> seems strange here, as opposed to an\n    // ApolloQueryResult<TData>\n  ) => Promise<FetchResult<TData>>,\n  MutationResult<TData>,\n];\n\n/* Subscription types */\n\nexport interface OnDataOptions<TData = any> {\n  client: ApolloClient<object>;\n  data: SubscriptionResult<TData>;\n}\n\nexport interface OnSubscriptionDataOptions<TData = any> {\n  client: ApolloClient<object>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\nexport interface BaseSubscriptionOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  variables?: TVariables;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?:\n    | boolean\n    | ((options: BaseSubscriptionOptions<TData, TVariables>) => boolean);\n  client?: ApolloClient<object>;\n  skip?: boolean;\n  context?: DefaultContext;\n  onComplete?: () => void;\n  onData?: (options: OnDataOptions<TData>) => any;\n  /**\n  * @deprecated Use onData instead\n  */\n  onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\n  onError?: (error: ApolloError) => void;\n  /**\n  * @deprecated Use onComplete instead\n  */\n  onSubscriptionComplete?: () => void;\n}\n\nexport interface SubscriptionResult<TData = any, TVariables = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n  // This was added by the legacy useSubscription type, and is tested in unit\n  // tests, but probably shouldnâ€™t be added to the result.\n  variables?: TVariables;\n}\n\nexport interface SubscriptionHookOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseSubscriptionOptions<TData, TVariables> {\n  subscription?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n}\n\nexport interface SubscriptionDataOptions<\n  TData = any,\n  TVariables = OperationVariables\n> extends BaseSubscriptionOptions<TData, TVariables> {\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  children?: null | ((result: SubscriptionResult<TData>) => JSX.Element | null);\n}\n\nexport interface SubscriptionCurrentObservable {\n  query?: Observable<any>;\n  subscription?: ObservableSubscription;\n}\n"]}