{"version":3,"file":"trie.esm.js","sources":["../src/trie.ts"],"sourcesContent":["// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds\n// object keys weakly, yet can also hold non-object keys, unlike the\n// native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// null-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class Trie<Data> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, Trie<Data>>;\n  private strong?: Map<any, Trie<Data>>;\n  private data?: Data;\n\n  constructor(\n    private weakness = true,\n    private makeData: (array: any[]) => Data = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): Data {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): Data {\n    let node: Trie<Data> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, Trie<Data>>())\n      : this.strong || (this.strong = new Map<any, Trie<Data>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new Trie<Data>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,IAAM,eAAe,GAAG,YAAM,EAAA,OAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAnB,EAAmB,CAAC;AAElD;AACM,IAAA,EAAA,GAAqB,KAAK,CAAC,SAAS,EAAlC,OAAO,GAAA,EAAA,CAAA,OAAA,EAAE,KAAK,GAAA,EAAA,CAAA,KAAoB,CAAC;AAE3C,IAAA,IAAA,kBAAA,YAAA;IAQE,SACU,IAAA,CAAA,QAAe,EACf,QAAkD,EAAA;AADlD,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAe,GAAA,IAAA,CAAA,EAAA;AACf,QAAA,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA,EAAA,QAAkD,GAAA,eAAA,CAAA,EAAA;QADlD,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAO;QACf,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA0C;KACxD;AAEG,IAAA,IAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;QAA+B,IAAW,KAAA,GAAA,EAAA,CAAA;aAAX,IAAW,EAAA,GAAA,CAAA,EAAX,EAAW,GAAA,SAAA,CAAA,MAAA,EAAX,EAAW,EAAA,EAAA;YAAX,KAAW,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA,CAAA;;AACxC,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAChC,CAAA;IAEM,IAAW,CAAA,SAAA,CAAA,WAAA,GAAlB,UAAiD,KAAQ,EAAA;QACvD,IAAI,IAAI,GAAe,IAAI,CAAC;QAC5B,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,UAAA,GAAG,IAAI,OAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAA7B,EAA6B,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACpE,CAAA;IAEO,IAAY,CAAA,SAAA,CAAA,YAAA,GAApB,UAAqB,GAAQ,EAAA;QAC3B,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC;AACxC,cAAE,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,GAAG,IAAI,OAAO,EAAmB,CAAC;AAC3D,cAAE,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAmB,CAAC,CAAC;QAC9D,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACzB,QAAA,IAAI,CAAC,KAAK;AAAE,YAAA,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,GAAG,IAAI,IAAI,CAAO,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC/E,QAAA,OAAO,KAAK,CAAC;KACd,CAAA;IACH,OAAC,IAAA,CAAA;AAAD,CAAC,EAAA,EAAA;AAED,SAAS,QAAQ,CAAC,KAAU,EAAA;IAC1B,QAAQ,OAAO,KAAK;AACpB,QAAA,KAAK,QAAQ;YACX,IAAI,KAAK,KAAK,IAAI;gBAAE,MAAM;;AAE5B,QAAA,KAAK,UAAU;AACb,YAAA,OAAO,IAAI,CAAC;AACb,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACf;;;;"}