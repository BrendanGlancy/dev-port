{"version":3,"sources":["../../../../build/babel/plugins/jsx-pragma.ts"],"sourcesContent":["import {\n  NodePath,\n  PluginObj,\n  types as BabelTypes,\n} from 'next/dist/compiled/babel/core'\nimport jsx from 'next/dist/compiled/babel/plugin-syntax-jsx'\n\nexport default function ({\n  types: t,\n}: {\n  types: typeof BabelTypes\n}): PluginObj<any> {\n  return {\n    inherits: jsx,\n    visitor: {\n      JSXElement(_path, state) {\n        state.set('jsx', true)\n      },\n\n      // Fragment syntax is still JSX since it compiles to createElement(),\n      // but JSXFragment is not a JSXElement\n      JSXFragment(_path, state) {\n        state.set('jsx', true)\n      },\n\n      Program: {\n        exit(path: NodePath<BabelTypes.Program>, state) {\n          if (state.get('jsx')) {\n            const pragma = t.identifier(state.opts.pragma)\n            let importAs = pragma\n\n            // if there's already a React in scope, use that instead of adding an import\n            const existingBinding =\n              state.opts.reuseImport !== false &&\n              state.opts.importAs &&\n              path.scope.getBinding(state.opts.importAs)\n\n            // var _jsx = _pragma.createElement;\n            if (state.opts.property) {\n              if (state.opts.importAs) {\n                importAs = t.identifier(state.opts.importAs)\n              } else {\n                importAs = path.scope.generateUidIdentifier('pragma')\n              }\n\n              const mapping = t.variableDeclaration('var', [\n                t.variableDeclarator(\n                  pragma,\n                  t.memberExpression(\n                    importAs,\n                    t.identifier(state.opts.property)\n                  )\n                ),\n              ])\n\n              // if the React binding came from a require('react'),\n              // make sure that our usage comes after it.\n              let newPath: NodePath<BabelTypes.VariableDeclaration>\n\n              if (\n                existingBinding &&\n                t.isVariableDeclarator(existingBinding.path.node) &&\n                t.isCallExpression(existingBinding.path.node.init) &&\n                t.isIdentifier(existingBinding.path.node.init.callee) &&\n                existingBinding.path.node.init.callee.name === 'require'\n              ) {\n                ;[newPath] =\n                  existingBinding.path.parentPath.insertAfter(mapping)\n              } else {\n                ;[newPath] = path.unshiftContainer('body', mapping)\n              }\n\n              for (const declar of newPath.get('declarations')) {\n                path.scope.registerBinding(\n                  newPath.node.kind,\n                  declar as NodePath<BabelTypes.Node>\n                )\n              }\n            }\n\n            if (!existingBinding) {\n              const importSpecifier = t.importDeclaration(\n                [\n                  state.opts.import\n                    ? // import { $import as _pragma } from '$module'\n                      t.importSpecifier(\n                        importAs,\n                        t.identifier(state.opts.import)\n                      )\n                    : state.opts.importNamespace\n                    ? t.importNamespaceSpecifier(importAs)\n                    : // import _pragma from '$module'\n                      t.importDefaultSpecifier(importAs),\n                ],\n                t.stringLiteral(state.opts.module || 'react')\n              )\n\n              const [newPath] = path.unshiftContainer('body', importSpecifier)\n              for (const specifier of newPath.get('specifiers')) {\n                path.scope.registerBinding(\n                  'module',\n                  specifier as NodePath<BabelTypes.Node>\n                )\n              }\n            }\n          }\n        },\n      },\n    },\n  }\n}\n"],"names":[],"mappings":"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"}