{"version":3,"sources":["../../lib/coalesced-function.ts"],"sourcesContent":["type CoalescedInvoke<T> = {\n  isOrigin: boolean\n  value: T\n}\n\nexport type UnwrapPromise<T> = T extends Promise<infer U> ? U : T\n\nconst globalInvokeCache = new Map<string, Promise<CoalescedInvoke<unknown>>>()\n\nexport function withCoalescedInvoke<F extends (...args: any) => any>(\n  func: F\n): (\n  key: string,\n  args: Parameters<F>\n) => Promise<CoalescedInvoke<UnwrapPromise<ReturnType<F>>>> {\n  return async function (key: string, args: Parameters<F>) {\n    const entry = globalInvokeCache.get(key)\n    if (entry) {\n      return entry.then((res) => ({\n        isOrigin: false,\n        value: res.value as UnwrapPromise<ReturnType<F>>,\n      }))\n    }\n\n    async function __wrapper() {\n      return await func.apply(undefined, args)\n    }\n\n    const future = __wrapper()\n      .then((res) => {\n        globalInvokeCache.delete(key)\n        return { isOrigin: true, value: res as UnwrapPromise<ReturnType<F>> }\n      })\n      .catch((err) => {\n        globalInvokeCache.delete(key)\n        return Promise.reject(err)\n      })\n    globalInvokeCache.set(key, future)\n    return future\n  }\n}\n"],"names":[],"mappings":";;;;QASgB,mBAAmB,GAAnB,mBAAmB;AAFnC,KAAK,CAAC,iBAAiB,GAAG,GAAG,CAAC,GAAG;SAEjB,mBAAmB,CACjC,IAAO,EAImD,CAAC;0BACpC,GAAW,EAAE,IAAmB,EAAE,CAAC;QACxD,KAAK,CAAC,KAAK,GAAG,iBAAiB,CAAC,GAAG,CAAC,GAAG;QACvC,EAAE,EAAE,KAAK,EAAE,CAAC;mBACH,KAAK,CAAC,IAAI,EAAE,GAAG;oBACpB,QAAQ,EAAE,KAAK;oBACf,KAAK,EAAE,GAAG,CAAC,KAAK;;;QAEpB,CAAC;uBAEc,SAAS,GAAG,CAAC;yBACb,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI;QACzC,CAAC;QAED,KAAK,CAAC,MAAM,GAAG,SAAS,GACrB,IAAI,EAAE,GAAG,GAAK,CAAC;YACd,iBAAiB,CAAC,MAAM,CAAC,GAAG;;gBACnB,QAAQ,EAAE,IAAI;gBAAE,KAAK,EAAE,GAAG;;QACrC,CAAC,EACA,KAAK,EAAE,GAAG,GAAK,CAAC;YACf,iBAAiB,CAAC,MAAM,CAAC,GAAG;mBACrB,OAAO,CAAC,MAAM,CAAC,GAAG;QAC3B,CAAC;QACH,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM;eAC1B,MAAM;IACf,CAAC;AACH,CAAC"}