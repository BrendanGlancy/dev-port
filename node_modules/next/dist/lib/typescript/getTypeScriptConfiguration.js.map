{"version":3,"sources":["../../../lib/typescript/getTypeScriptConfiguration.ts"],"sourcesContent":["import chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\n\nimport { FatalError } from '../fatal-error'\n\nexport async function getTypeScriptConfiguration(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  metaOnly?: boolean\n): Promise<import('typescript').ParsedCommandLine> {\n  try {\n    const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n      getCanonicalFileName: (fileName: string) => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => os.EOL,\n    }\n\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile)\n    if (error) {\n      throw new FatalError(ts.formatDiagnostic(error, formatDiagnosticsHost))\n    }\n\n    let configToParse: any = config\n\n    const result = ts.parseJsonConfigFileContent(\n      configToParse,\n      // When only interested in meta info,\n      // avoid enumerating all files (for performance reasons)\n      metaOnly\n        ? {\n            ...ts.sys,\n            readDirectory(_path, extensions, _excludes, _includes, _depth) {\n              return [extensions ? `file${extensions[0]}` : `file.ts`]\n            },\n          }\n        : ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new FatalError(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost)\n      )\n    }\n\n    return result\n  } catch (err) {\n    if (err?.name === 'SyntaxError') {\n      const reason = '\\n' + (err?.message ?? '')\n      throw new FatalError(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') +\n            '.' +\n            ' Please make sure it contains syntactically correct JSON.'\n        ) + reason\n      )\n    }\n    throw err\n  }\n}\n"],"names":[],"mappings":";;;;QAMsB,0BAA0B,GAA1B,0BAA0B;AAN9B,GAAO,CAAP,MAAO;AACV,GAAI,CAAJ,GAAI;AACF,GAAM,CAAN,MAAM;AAEI,GAAgB,CAAhB,WAAgB;;;;;;eAErB,0BAA0B,CAC9C,EAA+B,EAC/B,YAAoB,EACpB,QAAkB,EAC+B,CAAC;QAC9C,CAAC;YAqCC,GAAa;QApCjB,KAAK,CAAC,qBAAqB;YACzB,oBAAoB,GAAG,QAAgB,GAAK,QAAQ;;YACpD,mBAAmB,EAAE,EAAE,CAAC,GAAG,CAAC,mBAAmB;YAC/C,UAAU,MAdD,GAAI,SAcQ,GAAG;;QAG1B,KAAK,GAAG,MAAM,GAAE,KAAK,MAAK,EAAE,CAAC,cAAc,CAAC,YAAY,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ;QACzE,EAAE,EAAE,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,GAAG,CAhBY,WAAgB,YAgBhB,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,qBAAqB;QACvE,CAAC;QAED,GAAG,CAAC,aAAa,GAAQ,MAAM;QAE/B,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,0BAA0B,CAC1C,aAAa,EACb,EAAqC,AAArC,mCAAqC;QACrC,EAAwD,AAAxD,sDAAwD;QACxD,QAAQ;eAEC,EAAE,CAAC,GAAG;YACT,aAAa,EAAC,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;;oBACtD,UAAU,IAAI,IAAI,EAAE,UAAU,CAAC,CAAC,OAAO,OAAO;;YACxD,CAAC;YAEH,EAAE,CAAC,GAAG,EAlCC,MAAM,SAmCZ,OAAO,CAAC,YAAY;QAG3B,EAAE,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC;YAClB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,IAC/B,IAAI,MACL,EAAsC,AAAtC,oCAAsC;gBACtC,IAAI,KAAK,KAAK;;QAEpB,CAAC;QAED,EAAE,GAAE,GAAa,GAAb,MAAM,CAAC,MAAM,cAAb,GAAa,UAAb,CAAqB,QAArB,CAAqB,GAArB,GAAa,CAAE,MAAM,EAAE,CAAC;YAC1B,KAAK,CAAC,GAAG,CA7CY,WAAgB,YA8CnC,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,qBAAqB;QAE/D,CAAC;eAEM,MAAM;IACf,CAAC,QAAQ,GAAG,EAAE,CAAC;QACb,EAAE,GAAE,GAAG,aAAH,GAAG,UAAH,CAAS,QAAT,CAAS,GAAT,GAAG,CAAE,IAAI,OAAK,WAAa,GAAE,CAAC;gBACT,IAAY;YAAnC,KAAK,CAAC,MAAM,IAAG,EAAI,MAAI,IAAY,GAAZ,GAAG,aAAH,GAAG,UAAH,CAAY,QAAZ,CAAY,GAAZ,GAAG,CAAE,OAAO,cAAZ,IAAY,cAAZ,IAAY;YACnC,KAAK,CAAC,GAAG,CAtDY,WAAgB,YAJzB,MAAO,SA2DX,GAAG,CAAC,IAAI,EACZ,eAAiB,GA5DT,MAAO,SA6DT,IAAI,EAAC,aAAe,MACxB,CAAG,KACH,yDAA2D,KAC3D,MAAM;QAEd,CAAC;QACD,KAAK,CAAC,GAAG;IACX,CAAC;AACH,CAAC"}