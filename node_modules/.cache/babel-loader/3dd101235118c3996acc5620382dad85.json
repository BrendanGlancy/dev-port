{"ast":null,"code":"import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.node,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\nfunction useRefWithUpdate() {\n  var forceUpdate = useForceUpdate();\n  var ref = useRef(null);\n  var attachRef = useCallback(function (element) {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var _useRefWithUpdate = useRefWithUpdate(),\n      menuRef = _useRefWithUpdate[0],\n      setMenu = _useRefWithUpdate[1];\n\n  var menuElement = menuRef.current;\n\n  var _useRefWithUpdate2 = useRefWithUpdate(),\n      toggleRef = _useRefWithUpdate2[0],\n      setToggle = _useRefWithUpdate2[1];\n\n  var toggleElement = toggleRef.current;\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (nextShow, event) {\n    onToggle(nextShow, event);\n  }, [onToggle]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', function (event) {\n    var _menuRef$current, _toggleRef$current;\n\n    var key = event.key;\n    var target = event.target;\n    var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (!menuRef.current && key === 'Tab') {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', function (e) {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, event);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        event.preventDefault();\n        event.stopPropagation();\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children);\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;","map":{"version":3,"sources":["/Users/brendanglancy/Desktop/dev-port/node_modules/react-bootstrap/node_modules/react-overlays/esm/Dropdown.js"],"names":["matches","qsa","addEventListener","React","useCallback","useRef","useEffect","useMemo","PropTypes","useUncontrolledProp","usePrevious","useForceUpdate","useGlobalListener","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","propTypes","children","node","drop","oneOf","focusFirstItemOnShow","itemSelector","string","alignEnd","bool","show","defaultShow","onToggle","func","useRefWithUpdate","forceUpdate","ref","attachRef","element","current","Dropdown","_ref","rawShow","rawOnToggle","_ref$itemSelector","_useUncontrolledProp","_useRefWithUpdate","menuRef","setMenu","menuElement","_useRefWithUpdate2","toggleRef","setToggle","toggleElement","lastShow","lastSourceEvent","focusInDropdown","toggle","nextShow","event","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","type","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","_menuRef$current","_toggleRef$current","key","target","fromMenu","fromToggle","isInput","tagName","next","preventDefault","_next","e","_menuRef$current2","once","stopPropagation","createElement","Provider","value","displayName","Menu","Toggle"],"mappings":"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","sourcesContent":["import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useGlobalListener from '@restart/hooks/useGlobalListener';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.node,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\nfunction useRefWithUpdate() {\n  var forceUpdate = useForceUpdate();\n  var ref = useRef(null);\n  var attachRef = useCallback(function (element) {\n    ref.current = element; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  return [ref, attachRef];\n}\n/**\n * @displayName Dropdown\n * @public\n */\n\n\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var _useRefWithUpdate = useRefWithUpdate(),\n      menuRef = _useRefWithUpdate[0],\n      setMenu = _useRefWithUpdate[1];\n\n  var menuElement = menuRef.current;\n\n  var _useRefWithUpdate2 = useRefWithUpdate(),\n      toggleRef = _useRefWithUpdate2[0],\n      setToggle = _useRefWithUpdate2[1];\n\n  var toggleElement = toggleRef.current;\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (nextShow, event) {\n    onToggle(nextShow, event);\n  }, [onToggle]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  useGlobalListener('keydown', function (event) {\n    var _menuRef$current, _toggleRef$current;\n\n    var key = event.key;\n    var target = event.target;\n    var fromMenu = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(target);\n    var fromToggle = (_toggleRef$current = toggleRef.current) == null ? void 0 : _toggleRef$current.contains(target); // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && fromMenu)) {\n      return;\n    }\n\n    if (!fromMenu && !fromToggle) {\n      return;\n    }\n\n    if (!menuRef.current && key === 'Tab') {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          onToggle(true, event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Tab':\n        // on keydown the target is the element being tabbed FROM, we need that\n        // to know if this event is relevant to this dropdown (e.g. in this menu).\n        // On `keyup` the target is the element being tagged TO which we use to check\n        // if focus has left the menu\n        addEventListener(document, 'keyup', function (e) {\n          var _menuRef$current2;\n\n          if (e.key === 'Tab' && !e.target || !((_menuRef$current2 = menuRef.current) != null && _menuRef$current2.contains(e.target))) {\n            onToggle(false, event);\n          }\n        }, {\n          once: true\n        });\n        break;\n\n      case 'Escape':\n        event.preventDefault();\n        event.stopPropagation();\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  });\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children);\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}