{"ast":null,"code":"import addClass from 'dom-helpers/addClass';\nimport removeClass from 'dom-helpers/removeClass';\nimport css from 'dom-helpers/css';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport isOverflowing from './isOverflowing';\nimport { ariaHidden, hideSiblings, showSiblings } from './manageAriaHidden';\n\nfunction findIndexOf(arr, cb) {\n  var idx = -1;\n  arr.some(function (d, i) {\n    if (cb(d, i)) {\n      idx = i;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n/**\n * Proper state management for containers and the modals in those containers.\n *\n * @internal Used by the Modal to ensure proper styling of containers.\n */\n\n\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$hideSiblingNodes = _ref.hideSiblingNodes,\n        hideSiblingNodes = _ref$hideSiblingNodes === void 0 ? true : _ref$hideSiblingNodes,\n        _ref$handleContainerO = _ref.handleContainerOverflow,\n        handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO;\n\n    this.hideSiblingNodes = void 0;\n    this.handleContainerOverflow = void 0;\n    this.modals = void 0;\n    this.containers = void 0;\n    this.data = void 0;\n    this.scrollbarSize = void 0;\n    this.hideSiblingNodes = hideSiblingNodes;\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.modals = [];\n    this.containers = [];\n    this.data = [];\n    this.scrollbarSize = getScrollbarSize();\n  }\n\n  var _proto = ModalManager.prototype;\n\n  _proto.isContainerOverflowing = function isContainerOverflowing(modal) {\n    var data = this.data[this.containerIndexFromModal(modal)];\n    return data && data.overflowing;\n  };\n\n  _proto.containerIndexFromModal = function containerIndexFromModal(modal) {\n    return findIndexOf(this.data, function (d) {\n      return d.modals.indexOf(modal) !== -1;\n    });\n  };\n\n  _proto.setContainerStyle = function setContainerStyle(containerState, container) {\n    var style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    containerState.style = {\n      overflow: container.style.overflow,\n      paddingRight: container.style.paddingRight\n    };\n\n    if (containerState.overflowing) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style.paddingRight = parseInt(css(container, 'paddingRight') || '0', 10) + this.scrollbarSize + \"px\";\n    }\n\n    css(container, style);\n  };\n\n  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {\n    Object.assign(container.style, containerState.style);\n  };\n\n  _proto.add = function add(modal, container, className) {\n    var modalIdx = this.modals.indexOf(modal);\n    var containerIdx = this.containers.indexOf(container);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n\n    if (this.hideSiblingNodes) {\n      hideSiblings(container, modal);\n    }\n\n    if (containerIdx !== -1) {\n      this.data[containerIdx].modals.push(modal);\n      return modalIdx;\n    }\n\n    var data = {\n      modals: [modal],\n      // right now only the first modal of a container will have its classes applied\n      classes: className ? className.split(/\\s+/) : [],\n      overflowing: isOverflowing(container)\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(data, container);\n    }\n\n    data.classes.forEach(addClass.bind(null, container));\n    this.containers.push(container);\n    this.data.push(data);\n    return modalIdx;\n  };\n\n  _proto.remove = function remove(modal) {\n    var modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    var containerIdx = this.containerIndexFromModal(modal);\n    var data = this.data[containerIdx];\n    var container = this.containers[containerIdx];\n    data.modals.splice(data.modals.indexOf(modal), 1);\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (data.modals.length === 0) {\n      data.classes.forEach(removeClass.bind(null, container));\n\n      if (this.handleContainerOverflow) {\n        this.removeContainerStyle(data, container);\n      }\n\n      if (this.hideSiblingNodes) {\n        showSiblings(container, modal);\n      }\n\n      this.containers.splice(containerIdx, 1);\n      this.data.splice(containerIdx, 1);\n    } else if (this.hideSiblingNodes) {\n      // otherwise make sure the next top modal is visible to a SR\n      var _data$modals = data.modals[data.modals.length - 1],\n          backdrop = _data$modals.backdrop,\n          dialog = _data$modals.dialog;\n      ariaHidden(false, dialog);\n      ariaHidden(false, backdrop);\n    }\n  };\n\n  _proto.isTopModal = function isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  };\n\n  return ModalManager;\n}();\n\nexport default ModalManager;","map":{"version":3,"sources":["/Users/brendanglancy/Desktop/dev-port/node_modules/react-bootstrap/node_modules/react-overlays/esm/ModalManager.js"],"names":["addClass","removeClass","css","getScrollbarSize","isOverflowing","ariaHidden","hideSiblings","showSiblings","findIndexOf","arr","cb","idx","some","d","i","ModalManager","_temp","_ref","_ref$hideSiblingNodes","hideSiblingNodes","_ref$handleContainerO","handleContainerOverflow","modals","containers","data","scrollbarSize","_proto","prototype","isContainerOverflowing","modal","containerIndexFromModal","overflowing","indexOf","setContainerStyle","containerState","container","style","overflow","paddingRight","parseInt","removeContainerStyle","Object","assign","add","className","modalIdx","containerIdx","length","push","classes","split","forEach","bind","remove","splice","_data$modals","backdrop","dialog","isTopModal"],"mappings":"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","sourcesContent":["import addClass from 'dom-helpers/addClass';\nimport removeClass from 'dom-helpers/removeClass';\nimport css from 'dom-helpers/css';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport isOverflowing from './isOverflowing';\nimport { ariaHidden, hideSiblings, showSiblings } from './manageAriaHidden';\n\nfunction findIndexOf(arr, cb) {\n  var idx = -1;\n  arr.some(function (d, i) {\n    if (cb(d, i)) {\n      idx = i;\n      return true;\n    }\n\n    return false;\n  });\n  return idx;\n}\n\n/**\n * Proper state management for containers and the modals in those containers.\n *\n * @internal Used by the Modal to ensure proper styling of containers.\n */\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$hideSiblingNodes = _ref.hideSiblingNodes,\n        hideSiblingNodes = _ref$hideSiblingNodes === void 0 ? true : _ref$hideSiblingNodes,\n        _ref$handleContainerO = _ref.handleContainerOverflow,\n        handleContainerOverflow = _ref$handleContainerO === void 0 ? true : _ref$handleContainerO;\n\n    this.hideSiblingNodes = void 0;\n    this.handleContainerOverflow = void 0;\n    this.modals = void 0;\n    this.containers = void 0;\n    this.data = void 0;\n    this.scrollbarSize = void 0;\n    this.hideSiblingNodes = hideSiblingNodes;\n    this.handleContainerOverflow = handleContainerOverflow;\n    this.modals = [];\n    this.containers = [];\n    this.data = [];\n    this.scrollbarSize = getScrollbarSize();\n  }\n\n  var _proto = ModalManager.prototype;\n\n  _proto.isContainerOverflowing = function isContainerOverflowing(modal) {\n    var data = this.data[this.containerIndexFromModal(modal)];\n    return data && data.overflowing;\n  };\n\n  _proto.containerIndexFromModal = function containerIndexFromModal(modal) {\n    return findIndexOf(this.data, function (d) {\n      return d.modals.indexOf(modal) !== -1;\n    });\n  };\n\n  _proto.setContainerStyle = function setContainerStyle(containerState, container) {\n    var style = {\n      overflow: 'hidden'\n    }; // we are only interested in the actual `style` here\n    // because we will override it\n\n    containerState.style = {\n      overflow: container.style.overflow,\n      paddingRight: container.style.paddingRight\n    };\n\n    if (containerState.overflowing) {\n      // use computed style, here to get the real padding\n      // to add our scrollbar width\n      style.paddingRight = parseInt(css(container, 'paddingRight') || '0', 10) + this.scrollbarSize + \"px\";\n    }\n\n    css(container, style);\n  };\n\n  _proto.removeContainerStyle = function removeContainerStyle(containerState, container) {\n    Object.assign(container.style, containerState.style);\n  };\n\n  _proto.add = function add(modal, container, className) {\n    var modalIdx = this.modals.indexOf(modal);\n    var containerIdx = this.containers.indexOf(container);\n\n    if (modalIdx !== -1) {\n      return modalIdx;\n    }\n\n    modalIdx = this.modals.length;\n    this.modals.push(modal);\n\n    if (this.hideSiblingNodes) {\n      hideSiblings(container, modal);\n    }\n\n    if (containerIdx !== -1) {\n      this.data[containerIdx].modals.push(modal);\n      return modalIdx;\n    }\n\n    var data = {\n      modals: [modal],\n      // right now only the first modal of a container will have its classes applied\n      classes: className ? className.split(/\\s+/) : [],\n      overflowing: isOverflowing(container)\n    };\n\n    if (this.handleContainerOverflow) {\n      this.setContainerStyle(data, container);\n    }\n\n    data.classes.forEach(addClass.bind(null, container));\n    this.containers.push(container);\n    this.data.push(data);\n    return modalIdx;\n  };\n\n  _proto.remove = function remove(modal) {\n    var modalIdx = this.modals.indexOf(modal);\n\n    if (modalIdx === -1) {\n      return;\n    }\n\n    var containerIdx = this.containerIndexFromModal(modal);\n    var data = this.data[containerIdx];\n    var container = this.containers[containerIdx];\n    data.modals.splice(data.modals.indexOf(modal), 1);\n    this.modals.splice(modalIdx, 1); // if that was the last modal in a container,\n    // clean up the container\n\n    if (data.modals.length === 0) {\n      data.classes.forEach(removeClass.bind(null, container));\n\n      if (this.handleContainerOverflow) {\n        this.removeContainerStyle(data, container);\n      }\n\n      if (this.hideSiblingNodes) {\n        showSiblings(container, modal);\n      }\n\n      this.containers.splice(containerIdx, 1);\n      this.data.splice(containerIdx, 1);\n    } else if (this.hideSiblingNodes) {\n      // otherwise make sure the next top modal is visible to a SR\n      var _data$modals = data.modals[data.modals.length - 1],\n          backdrop = _data$modals.backdrop,\n          dialog = _data$modals.dialog;\n      ariaHidden(false, dialog);\n      ariaHidden(false, backdrop);\n    }\n  };\n\n  _proto.isTopModal = function isTopModal(modal) {\n    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;\n  };\n\n  return ModalManager;\n}();\n\nexport default ModalManager;"]},"metadata":{},"sourceType":"module"}